apiVersion: apps/v1
kind: Deployment
metadata:
  name: pod-existence-checker-deployment
  namespace: pod-existence-checker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: pod-existence-checker
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: pod-existence-checker
    spec:
      serviceAccountName: pod-existence-checker-sa
      automountServiceAccountToken: true
      hostPID: false
      hostIPC: false
      hostNetwork: false
      securityContext:
        runAsUser: 10001
        runAsGroup: 10001
        fsGroup: 10001
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
        seLinuxOptions:
          level: "s0:c123,c456"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: environment
                operator: In
                values:
                - dev
      initContainers:
      - name: check-pod-exists
        image: << container registry repository >>/pod-existence-check:0.0.6
        command: ["python", "/scripts/main.py"]
        env:
        - name: NAMESPACE_LABEL_DICT
          value: '{"namespace-1": [{"app": "MyApp", "environment": "dev"}], "namespace-2": [{"app": "MyApp", "environment": "dev"}]}'
        - name: TIMEOUT
          value: "300"
        - name: RETRY_INTERVAL
          value: "15"
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
            cpu: "100m"
      containers:
      - name: nginx
        image: nginxinc/nginx-unprivileged:latest
        resources:
          requests:
            memory: "100Mi"
            cpu: "50m"
          limits:
            memory: "100Mi"
            cpu: "100m"